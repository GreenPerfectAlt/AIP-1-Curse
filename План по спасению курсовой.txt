1-В  общем  случае  постановка  задачи  завершается  разработкой  технического 
задания и внешней спецификации программы. В нашем случае достаточно огра-
ничиться только спецификацией программы, включающей: 
- описание исходных данных и результатов (типы, форматы, точность, способ 
передачи, ограничения); 
- описание функций, реализуемых программой; 
- способ обращения к программе; 
- описание возможных аварийных ситуаций и ошибок пользователя. 
Таким образом, на этом этапе программа рассматривается как «черный 
ящик»,  для  которого  определены  основные  функциональные  требования, 
входные и выходные данные.
2-На этом этапе курсового проектирования следует выполнить обзор и обосно-
ванный выбор структур данных,  предназначенных для внутреннего представле-
ния  табличной информации [2, 4 – 8]:  
-  статических и динамических массивов; 
-  различных видов списков; 
-  бинарных деревьев. 
Кроме этого, следует привести полное описание всех остальных типов вход-
ных, выходных и промежуточных данных, используемых в будущей программе. 
Таким образом, основная задача этого этапа ѕ выбор типов и проекти-
рование структур данных, определяющих способы представления, хранения и 
преобразования входных, выходных и промежуточных данных. 
3- Модули считают-
ся независимыми, если они удовлетворяют таким требованиям:  
- каждый  модуль  можно  заменить  другим  функционально-эквивалентным 
модулем с таким же интерфейсом; 
- взаимосвязи между модулями установлены в соответствии с иерархическим 
принципом; 
- модуль имеет одну точку входа и одну точку выхода; 
- доступ к внутренним структурам данных модуля выполняется через его ин-
терфейс; 
- модуль  возвращает  управление  тому  программному  модулю,  который  его 
вызвал. 
Таким  образом,  основная  задача  этого  этапа  ѕ  разработка  модульной 
структуры программы, определение функций модулей и способов их взаимо-
действия. 
4-Основной задачей этого этапа является написание текста (кодирование) 
программных модулей на алгоритмическом языке с учетом правил структур-
ного программирования. 
5-Идея нисходящего тестирования и отладки предполагает, что к тести-
рованию программы приступают еще до того, как завершена ее разработка. 




1.Введите название файла из которого прочитатб / создание файла
2.Создание таблицы\двунаправленный бинарный список как функции 
3.Просмотр таблицы\скролинг узнать как делать работа с conio по стрелкам ф-ция в библиотеке меню
6.Сортировка по убыванию и возврастанию сначала вывести потом предложить
4.Удаление записи \сначала вывод через п3\удаление по табельному номеру\нужно нажать ентер что бы удалть и ввести Ключевое поле
5.Корректирока
7.Поиск рабочего по табелю
9.Вывод сначала таблицы из а потом по заданию\дополнить
8.Сохранение в файл ввести имя может в другой мало ли я не ебу в тхт

10.Выход собственно с переводом на п8 выбор сохр или нет

Бинарный двунапраленный.Доб в библиотеку скроллинг как это может поменять меню мышкой что бы.Проверки на то что может быть одинаковый табельный номер,год рождения\больше символов функции проверки может одну сразу при создании\ввод по энтеру скрл страницы.

enum SortType
{
    SORTTYPE_FORWARD,
    SORTTYPE_BACKWARDS
};
 
void sortData(SortType type)
{
    if (type == SORTTYPE_FORWARD)
        // Сортировка данных в одном порядке 
    else if (type == SORTTYPE_BACKWARDS)
        // Сортировка данных в обратном порядке
}

int main() {
	const char* menu_item_text[] = {
		 "Организация --> 1",
		 "Просмотр --> 2" ,
		 "Добавление новой записи --> 3" ,
		 "Удаление записи --> 4",
		 "Изменение(корректировка)--> 5",
		 "Сортировка  --> 6",
		 "Сохранение --> 7",
		 "Обработка  --> 8",
		 "Выход  --> 9",
		 //Навзание работы
		 "Лабораторная работа №1\n\nДинамическая структура — очередь.\nХранит библиотечные данные: автора книги (строка)и название книги(строка).\nПредусмотреть функции добавления элементов в очередь  и  удаления  из  нее,  \nа  также  функцию  поиска  всех  произведений  введенного  автора.\n"
		 }